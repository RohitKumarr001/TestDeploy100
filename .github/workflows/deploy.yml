name: Deploy to TestFlight and Firebase

on:
  push:
    branches: [ main ]

jobs:
  setup:
    name: Setup Dependencies
    runs-on: macos-latest
    outputs:
      flutter-cache-key: ${{ steps.flutter-cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.7'
          channel: 'stable'

      - name: Cache Flutter dependencies
        id: flutter-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-${{ runner.os }}-

      - name: Get dependencies
        run: flutter pub get

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'

  deploy-android:
    name: Deploy Android to Firebase
    runs-on: macos-latest
    needs: setup
    continue-on-error: true  # This allows the workflow to continue even if Android deployment fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.7'
          channel: 'stable'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-${{ runner.os }}-

      - name: Get dependencies
        run: flutter pub get

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'

      - name: Install Android Fastlane dependencies
        run: |
          cd android
          bundle install

      - name: Build Android APK
        run: flutter build apk --release

      - name: Deploy Android to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_ANDROID_APP_ID: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          FIREBASE_TESTERS: ${{ secrets.FIREBASE_TESTERS }}
        run: |
          cd android
          bundle exec fastlane beta

  deploy-ios:
    name: Deploy iOS to TestFlight
    runs-on: macos-latest
    needs: setup
    continue-on-error: true  # This allows the workflow to continue even if iOS deployment fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.7'
          channel: 'stable'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-${{ runner.os }}-

      - name: Get dependencies
        run: flutter pub get

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'

      - name: Install iOS Fastlane dependencies
        run: |
          cd ios
          bundle install

      - name: Validate iOS secrets
        run: |
          echo "Checking iOS secrets..."
          if [[ -z "${{ secrets.IOS_DIST_SIGNING_KEY }}" ]]; then
            echo "‚ùå IOS_DIST_SIGNING_KEY is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}" ]]; then
            echo "‚ùå IOS_DIST_SIGNING_KEY_PASSWORD is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.IOS_PROVISION_PROFILE }}" ]]; then
            echo "‚ùå IOS_PROVISION_PROFILE is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.KEYCHAIN_PASSWORD }}" ]]; then
            echo "‚ùå KEYCHAIN_PASSWORD is not set"
            exit 1
          fi
          echo "‚úÖ All iOS secrets are properly configured"

      - name: Setup iOS certificates
        env:
          IOS_DIST_SIGNING_KEY: ${{ secrets.IOS_DIST_SIGNING_KEY }}
          IOS_DIST_SIGNING_KEY_PASSWORD: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}
          IOS_PROVISION_PROFILE: ${{ secrets.IOS_PROVISION_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo "Setting up iOS certificates..."
          
          # Validate environment variables are not empty
          if [[ -z "$IOS_DIST_SIGNING_KEY" ]]; then
            echo "‚ùå IOS_DIST_SIGNING_KEY environment variable is empty"
            exit 1
          fi
          
          if [[ -z "$IOS_PROVISION_PROFILE" ]]; then
            echo "‚ùå IOS_PROVISION_PROFILE environment variable is empty"
            exit 1
          fi
          
          if [[ -z "$KEYCHAIN_PASSWORD" ]]; then
            echo "‚ùå KEYCHAIN_PASSWORD environment variable is empty"
            exit 1
          fi
          
          # Decode certificates with error handling
          echo "Decoding certificates..."
          if ! echo -n "$IOS_DIST_SIGNING_KEY" | base64 --decode -o $CERTIFICATE_PATH; then
            echo "‚ùå Failed to decode IOS_DIST_SIGNING_KEY"
            exit 1
          fi
          
          if ! echo -n "$IOS_PROVISION_PROFILE" | base64 --decode -o $PP_PATH; then
            echo "‚ùå Failed to decode IOS_PROVISION_PROFILE"
            exit 1
          fi
          
          # Verify files were created
          if [[ ! -f "$CERTIFICATE_PATH" ]]; then
            echo "‚ùå Certificate file was not created"
            exit 1
          fi
          
          if [[ ! -f "$PP_PATH" ]]; then
            echo "‚ùå Provisioning profile file was not created"
            exit 1
          fi
          
          echo "‚úÖ Certificate and provisioning profile decoded successfully"
          
          # Create temporary keychain
          echo "Creating temporary keychain..."
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate with better error handling
          echo "Importing certificate..."
          if ! security import $CERTIFICATE_PATH -P "$IOS_DIST_SIGNING_KEY_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH; then
            echo "‚ùå Failed to import certificate. Please check your IOS_DIST_SIGNING_KEY and IOS_DIST_SIGNING_KEY_PASSWORD"
            echo "Certificate file size: $(ls -la $CERTIFICATE_PATH)"
            exit 1
          fi
          
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          echo "Installing provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          if ! UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i $PP_PATH)); then
            echo "‚ùå Failed to extract UUID from provisioning profile"
            exit 1
          fi
          
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          echo "‚úÖ Provisioning profile installed with UUID: $UUID"
          echo "‚úÖ iOS certificates setup completed successfully"

      - name: Build iOS
        run: flutter build ios --release --no-codesign

      - name: Deploy iOS to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER: ${{ secrets.APP_STORE_CONNECT_API_ISSUER }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          IOS_DIST_SIGNING_KEY: ${{ secrets.IOS_DIST_SIGNING_KEY }}
        run: |
          cd ios
          bundle exec fastlane beta

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-android, deploy-ios]
    if: always()  # This job will always run, regardless of the success/failure of previous jobs
    steps:
      - name: Check deployment results
        run: |
          echo "=== Deployment Summary ==="
          echo "Android deployment: ${{ needs.deploy-android.result }}"
          echo "iOS deployment: ${{ needs.deploy-ios.result }}"
          
          if [[ "${{ needs.deploy-android.result }}" == "success" ]]; then
            echo "‚úÖ Android deployment completed successfully"
          else
            echo "‚ùå Android deployment failed or was skipped"
          fi
          
          if [[ "${{ needs.deploy-ios.result }}" == "success" ]]; then
            echo "‚úÖ iOS deployment completed successfully"
          else
            echo "‚ùå iOS deployment failed or was skipped"
          fi
          
          # Set overall status
          if [[ "${{ needs.deploy-android.result }}" == "success" || "${{ needs.deploy-ios.result }}" == "success" ]]; then
            echo "üéâ At least one deployment succeeded!"
            exit 0
          else
            echo "üí• All deployments failed"
            exit 1
          fi
